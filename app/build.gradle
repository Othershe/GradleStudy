apply plugin: 'com.android.application'
apply plugin: 'com.shh.test'

//testExtension {
//    message 'Hello Gradle'
//}

println "app config start"

def static releaseTime() {
    return new Date().format("yyyyMMddHHmm")
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.shh.studygradle"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resConfigs "zh"
    }

    dexOptions {
        // Sets the maximum number of DEX processes
        // that can be started concurrently.
        maxProcessCount 8
        // Sets the maximum memory allocation pool size
        // for the dex operation.
        javaMaxHeapSize "2g"
        // Enables Gradle to pre-dex library dependencies.
        preDexLibraries true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false

            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        def fileName = "StudyGradle${releaseTime()}_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                        outputFileName = fileName
                    }
                }
            }
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions "a", "b"
    productFlavors {
        free {
            dimension "a"
            applicationIdSuffix ".free"
            manifestPlaceholders = [icon: "@mipmap/ic_launcher_round"]
            resValue "string", "appName", '"SG-free"'
        }

        pay {
            dimension "a"
            applicationIdSuffix ".pay"
            manifestPlaceholders = [icon: "@mipmap/ic_launcher"]
            resValue "string", "appName", '"SG-pay"'
        }

        online {
            dimension "b"
            buildConfigField "String", "TIP", '"online version"'
        }

        offline {
            dimension "b"
            buildConfigField "String", "TIP", '"offline version"'
        }
    }

    variantFilter { variant ->
        def name = variant.flavors.name
        if (name.contains("offline")) {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task test1 {
    println "test1 task is executed"

    afterEvaluate {
        def adt = tasks.findByName("assembleDebug")
        adt.doFirst {
            println "execute before assembleDebug task Execution"
        }

        adt.doLast {
            println "execute after assembleDebug task Execution"
        }
    }
}

task testBoth {
    dependsOn("test1")
    doFirst {
        println "testBoth task:doFirst is executed"
    }
    doLast {
        println "testBoth task:doLast is executed"
    }
    println "testBoth task is executed"
}

afterEvaluate {
    println "app evaluate start"
    println "app evaluate end"
}

println "app config end"